package com.macademy.recordmgmt.services;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.macademy.recordmgmt.models.Student;
import com.macademy.recordmgmt.models.StudentRecord;
import com.macademy.recordmgmt.repositories.StudentRecordRepository;
import com.macademy.recordmgmt.repositories.StudentRepository;
import com.opencsv.CSVReader;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.time.LocalDate;
import java.util.List;

@Service
public class TestDataCSVLoadService {
    private final StudentRepository studentRepository;
    private final StudentRecordRepository studentRecordRepository;
    @Value("${student.csv.file.name}")
    private String studentcsvfilename;
    @Value("${student.record.csv.file.name}")
    private String studentrecordcsvfilename;

    public TestDataCSVLoadService(StudentRepository studentRepository, StudentRecordRepository studentRecordRepository) {
        this.studentRepository       = studentRepository;
        this.studentRecordRepository = studentRecordRepository;
    }


    public void loadStudentRecordDataFile() {
        try {
            // ClassPathResource refers that everything under resource files will be included in the jar file of this project
            // CSVReader reader = new CSVReader(new InputStreamReader(new ClassPathResource("data/studentrecord.csv").getInputStream()));
            ClassPathResource resource = new ClassPathResource(studentrecordcsvfilename.trim());
            CSVReader reader = new CSVReader(new InputStreamReader(resource.getInputStream()));

            String[] line;
            boolean isHeader = true;
            while ((line = reader.readNext()) != null) {
                if (isHeader) { // it means isHeader == true
                    isHeader = false;
                    continue; // bring the execution back to while testing condition
                }
                // Optionally, also skip lines where all fields are blank eg. the last line w/c is blank
                boolean allBlank = true;
                for (String field : line) {
                    if (field != null && !field.trim().isEmpty()) {
                        allBlank = false;
                        break; // exits the for loop ; and continue next section
                    }
                }
                if (allBlank)
                    continue;
                // Integer recordId  is a Priamry key and auto generated by the database.
                Integer studentId = Integer.parseInt(line[0].trim());
                String academicYear = line[1].trim();
                Integer grade = Integer.parseInt(line[2].trim());
                String subject = line[3].trim();
                String section = line[4].trim();
                double q1 = Double.parseDouble(line[5].trim());
                double q2 = Double.parseDouble(line[6].trim());
                double q3 = Double.parseDouble(line[7].trim());
                double q4 = Double.parseDouble(line[8].trim());
                Integer updatedBy = Integer.parseInt(line[9].trim());
                LocalDate updateDate = LocalDate.parse(line[10].trim());
                String comment = line[11].trim();
// we used setters here instead of passing to constructor b/c recordid is pk and assigned by dbase.
                StudentRecord s = new StudentRecord(); // default contstructor - with no argument
                s.setStudentId(studentId);
                s.setSubject(subject);
                s.setAcademicYear(academicYear);
                s.setGrade(grade);
                s.setSection(section);
                s.setQ1(q1);
                s.setQ2(q2);
                s.setQ3(q3);
                s.setQ4(q4);
                s.setUpdatedBy(updatedBy);
                s.setUpdateDate(updateDate);
                s.setComment(comment);

                studentRecordRepository.save(s);
            }
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadCsvStudentDataFile() {

        try {

            // TODO just for exploring if manual is needed
            //  Properties props = new Properties();
            // props.load(new FileInputStream("src/main/resources/application.properties"));
            // String path = props.getProperty("csv.path").trim(); // trim it!
            // Resource resource = new ClassPathResource(path);

            // ClassPathResource refers that everything under resource files will be included in the jar file of this project
            //CSVReader reader = new CSVReader(new InputStreamReader(new ClassPathResource("data/student.csv").getInputStream()));
            //TODO new File("C:/path/to/student.csv"); if we need to upload from other location
            System.out.println(studentcsvfilename + "student.csv.file.name");
            ClassPathResource resource = new ClassPathResource(studentcsvfilename.trim());
            System.out.println("resource" + resource);
            CSVReader csvReader = new CSVReader(new InputStreamReader(resource.getInputStream()));

            String[] line;
            boolean isHeader = true;
            while ((line = csvReader.readNext()) != null) {

                if (isHeader) {
                    isHeader = false;
                    continue;
                }
                // Optionally, also skip lines where all fields are blank
                boolean allBlank = true;
                for (String field : line) {
                    if (field != null && !field.trim().isEmpty()) {
                        allBlank = false;
                        break;
                    }
                }
                if (allBlank)
                    continue;
                Integer studentId = Integer.parseInt(line[0]);                      // 1
                String firstName = line[1].trim();                                  // 2
                String middleName = line[2].trim();                                 // 3
                String lastName = line[3].trim();                                   // 4
                LocalDate dateOfBirth = LocalDate.parse(line[4].trim());            // 5
                String gender = line[5].trim();                                     // 6
                LocalDate registrationDate = LocalDate.parse(line[6].trim());       // 7
                String photo = line[7];                                             // 8
                String kifleKetema = line[8];                                       // 9
                String kebele = line[9];                                            // 10
                String houseNumber = line[10];                                      // 11
                String phone = line[11];                                            // 12
                String comment = line[12];                                          // 13
                boolean isActive = Boolean.parseBoolean(line[13]);                  // 14
                Student student = new Student(studentId, firstName, middleName, lastName, dateOfBirth, gender, registrationDate, photo, kifleKetema, kebele, houseNumber, phone, comment, isActive);
                studentRepository.save(student);
            }
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //TODO remove this method if we decide to go with csv file loading -
    public void loadJSONStudentDataFile() throws IOException {
        // TODO - currently not functional but if needed to laod data from Json format instead of a csv
        // https://csvjson.com/csv2json is where we can convert csv to json
        ObjectMapper mapper = new ObjectMapper();
        // InputStream inputStream = new FileInputStream("studentdata.json");
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream("data/studentdata.json");
        if (inputStream == null) {
            throw new FileNotFoundException("File not found in resources folder");
        }
        // BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        TypeReference<List<Student>> typeRef = new TypeReference<>() {};
        List<Student> people = mapper.readValue(inputStream, typeRef);
        studentRepository.saveAll(people);
    }
}



