src/
 ├── main/
 │    ├── java/
 │    │    └── com/
 │    │         └── example/
 │    │             ├── ParentChildApplication.java
 │    │             ├── controller/
 │    │             │    └── ExcelUploadController.java
 │    │             ├── entity/
 │    │             │    ├── Parent.java
 │    │             │    └── Child.java
 │    │             ├── repository/
 │    │             │    ├── ParentRepository.java
 │    │             │    └── ChildRepository.java
 │    │             └── service/
 │    │                  └── ExcelUploadService.java
 │    ├── resources/
 │    │    ├── application.properties
 │    │    └── static/
 │    │    └── templates/
 │    └── pom.xml

<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Spring Boot Starter Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- Apache POI for Excel file handling -->
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>5.2.3</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.2.3</version>
    </dependency>
    <!-- H2 Database (For development purpose, can be replaced with MySQL) -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>1.4.200</version>
        <scope>runtime</scope>
    </dependency>
    <!-- Spring Boot Starter Thymeleaf for rendering HTML views -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <!-- Spring Boot Starter Test for Unit Testing -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>

package com.example.entity;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
public class Parent {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    @OneToMany(mappedBy = "parent", cascade = CascadeType.ALL)
    private List<Child> children = new ArrayList<>();

    // Getters and Setters
}

package com.example.entity;

import javax.persistence.*;

@Entity
public class Child {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private int age;

    @ManyToOne
    @JoinColumn(name = "parent_id")
    private Parent parent;

    // Getters and Setters
}

package com.example.repository;

import com.example.entity.Parent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ParentRepository extends JpaRepository<Parent, Long> {
}

package com.example.repository;

import com.example.entity.Child;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ChildRepository extends JpaRepository<Child, Long> {
}

package com.example.service;

import com.example.entity.Parent;
import com.example.entity.Child;
import com.example.repository.ParentRepository;
import com.example.repository.ChildRepository;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Iterator;

@Service
public class ExcelUploadService {

    private final ParentRepository parentRepository;
    private final ChildRepository childRepository;

    public ExcelUploadService(ParentRepository parentRepository, ChildRepository childRepository) {
        this.parentRepository = parentRepository;
        this.childRepository = childRepository;
    }

    public void uploadExcelData(MultipartFile file) throws IOException {
        Workbook workbook = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = workbook.getSheetAt(0);
        Iterator<Row> rowIterator = sheet.iterator();

        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();

            if (row.getRowNum() == 0) {
                continue;  // Skip header row
            }

            String parentName = row.getCell(0).getStringCellValue();
            String childName = row.getCell(1).getStringCellValue();
            int age = (int) row.getCell(2).getNumericCellValue();

            Parent parent = new Parent();
            parent.setName(parentName);

            Child child = new Child();
            child.setName(childName);
            child.setAge(age);
            child.setParent(parent);

            // Save the parent and child to the database
            parent.getChildren().add(child);
            parentRepository.save(parent);
        }
    }
}


package com.example.controller;

import com.example.service.ExcelUploadService;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/upload")
public class ExcelUploadController {

    private final ExcelUploadService excelUploadService;

    public ExcelUploadController(ExcelUploadService excelUploadService) {
        this.excelUploadService = excelUploadService;
    }

    @PostMapping("/excel")
    public String uploadExcel(@RequestParam("file") MultipartFile file) {
        try {
            excelUploadService.uploadExcelData(file);
            return "File uploaded successfully";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error uploading file: " + e.getMessage();
        }
    }
}


package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ParentChildApplication {
    public static void main(String[] args) {
        SpringApplication.run(ParentChildApplication.class, args);
    }
}


spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Excel Upload</title>
</head>
<body>
<h1>Upload Excel File</h1>
<form method="POST" enctype="multipart/form-data" th:action="@{/upload/excel}">
    <input type="file" name="file" />
    <button type="submit">Upload</button>
</form>
</body>
</html>

9. Testing with Postman
You can test the file upload using Postman with the following steps:

Set the request type to POST.
URL: http://localhost:8080/upload/excel.
Select form-data for the body type.
Add a key file of type file, and upload your Excel file.
Conclusion
This setup provides a full Spring Boot application that allows you to upload data from an Excel file into related Parent and Child tables using Apache POI. The service class handles the logic of parsing the Excel file and saving the data into the database.